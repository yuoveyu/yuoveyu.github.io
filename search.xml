<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JAVA</title>
      <link href="/2018/06/05/java/java/"/>
      <url>/2018/06/05/java/java/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tomcat自动启停脚本</title>
      <link href="/2018/06/01/shell/tomcat-start-end/"/>
      <url>/2018/06/01/shell/tomcat-start-end/</url>
      <content type="html"><![CDATA[<p>开发环境tomcat下经常重新部署,需要关闭tomcat进程,判断是否关闭成功,配置文件替换,图片备份,再启动tomcat.<br>通过ps和awk命令,可以把关闭和启动tomcat命令都集成到一个脚本中,一键部署更新.<br>以下是一个真实列子:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">app=<span class="string">'/home/poc/tomcat'</span></span><br><span class="line">info=ps aux | grep <span class="string">"<span class="variable">$&#123;app&#125;</span>"</span> | grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$info</span>"</span> ]; <span class="keyword">then</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">'is not running and start tomcat'</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">'is also running and stopping'</span></span><br><span class="line">    /home/poc/tomcat/bin/shutdown.sh </span><br><span class="line">    sleep 1 </span><br><span class="line">    info=ps aux | grep <span class="string">"<span class="variable">$&#123;app&#125;</span>"</span> | grep -v grep|awk <span class="string">'&#123;print $2&#125;'</span> </span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"info"</span>];<span class="keyword">then</span> </span><br><span class="line">        <span class="built_in">echo</span> <span class="string">'starttomcat…'</span> </span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="built_in">kill</span> −9 info </span><br><span class="line">    <span class="built_in">echo</span> <span class="string">'kill tomcat'</span></span><br><span class="line">    <span class="keyword">fi</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line"><span class="built_in">cd</span> /home/poc/tomcat/webapps </span><br><span class="line">rm -rf /home/poc/identityPic </span><br><span class="line"><span class="built_in">echo</span> <span class="string">'备份图片'</span></span><br><span class="line">cp /home/poc/tomcat/webapps/ar/identityPic ~ -R </span><br><span class="line">rm -rf ar* </span><br><span class="line">mkdir ar </span><br><span class="line">cp ~/ar.war ar/ </span><br><span class="line"><span class="built_in">cd</span> ar </span><br><span class="line">rm -rf identityPic </span><br><span class="line">jar xvf ar.war </span><br><span class="line">rm -rf ar.war </span><br><span class="line">cp ~/config/config.properties WEB-INF/classes/tinyConf </span><br><span class="line">cp ~/config/db.properties WEB-INF/classes/tinyConf </span><br><span class="line">cp /home/poc/identityPic /home/poc/tomcat/webapps/ar/ -R </span><br><span class="line"><span class="built_in">echo</span> <span class="string">'start tomcat'</span></span><br><span class="line">/home/poc/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> tomcat </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css学习笔记</title>
      <link href="/2018/06/01/html/css-notepad/"/>
      <url>/2018/06/01/html/css-notepad/</url>
      <content type="html"><![CDATA[<h3 id="禁止缩放"><a href="#禁止缩放" class="headerlink" title="禁止缩放"></a>禁止缩放</h3><p><meta name="viewport" content="width=device-width, initial-scale=1"></p><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#toolbar &#123;...&#125;</span><br><span class="line"><span class="selector-id">#toolbar</span> <span class="selector-tag">a</span><span class="selector-class">.link</span> &#123;<span class="attribute">color</span>:white&#125; <span class="comment">/*需要这样添加，连接颜色才能变为白色*/</span></span><br></pre></td></tr></table></figure><h3 id="import-url-xxx-css"><a href="#import-url-xxx-css" class="headerlink" title="import url(xxx.css)"></a>import url(xxx.css)</h3><p>出现在其它样式之前</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>采用 /<em>  **  </em>/ ,不能 //</p><h3 id="selector-property-value"><a href="#selector-property-value" class="headerlink" title="selector {property: value}"></a>selector {property: value}</h3><p>selector {property: value}</p><h3 id="body-p-td-ul"><a href="#body-p-td-ul" class="headerlink" title="body p td ul"></a>body p td ul</h3><p>通常body定义好样式后，相应的p，td，ul等都能适用，<br>但未了兼容，建议采用后一种写法<br>body  {<br>    font-family: Verdana, sans-serif;<br>}<br>p, td, ul, ol, li, dl, dt, dd  {<br>    font-family: Verdana, sans-serif;<br>}</p><h3 id="字体垂直居中"><a href="#字体垂直居中" class="headerlink" title="字体垂直居中"></a>字体垂直居中</h3><p>div {height:25px;line-height:25px;overflow:hidden;}<br>只要div和字体高度一样就可以</p><p></p><p style="border-style:none">无边框</p><p></p><p></p><p style="border-style:dotted">点线式边框</p><p></p><p></p><p style="border-style:dashed">破折线式边框</p><p></p><p></p><p style="border-style:solid">直线式边框</p><p></p><p></p><p style="border-style:double">双线式边框</p><p></p><p></p><p style="border-style:groove">槽线式边框</p><p></p><p></p><p style="border-style:ridge">脊线式边框</p><br>如果要出现水平滚动条，则： overflow-x:auto<br>同理，垂直滚动条为： overflow-y:auto<br>如果该div被包含在其他对象例如td中，则位置可设为相对：position:relative<p></p><table class="count_table2" border="1"><br>    <tr><br>        <th colspan="1" rowspan="2">新增客户</th><br>        <th colspan="2">办卡会员</th><br>        <th rowspan="2">消费客户</th><br>    </tr><br>    <tr><br>        <th>已办卡</th><br>        <th>未办卡</th><br>    </tr><br>    <tr><br>        <td id="new_num"></td><br>        <td id="has_card_num"></td><br>        <td id="no_card_num"></td><br>        <td id="consume_num"></td><br>    </tr><br></table><h3 id="选择相邻兄弟"><a href="#选择相邻兄弟" class="headerlink" title="选择相邻兄弟"></a>选择相邻兄弟</h3><p>如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器（Adjacent sibling selector）。<br>例如，如果要增加紧接在 h1 元素后出现的段落的上边距，可以这样写：<br>h1 + p {margin-top:50px;}<br>这个选择器读作：“选择紧接在 h1 元素后出现的段落，h1 和 p 元素拥有共同的父元素”。</p><p>li + li {font-weight:bold;background: #eef1f4;}<br>第一个元素不影响，后续的元素影响到</p><p>a:link {color: #FF0000}        /<em> 未访问的链接 </em>/<br>a:visited {color: #00FF00}    /<em> 已访问的链接 </em>/<br>a:hover {color: #FF00FF}    /<em> 鼠标移动到链接上 </em>/<br>a:active {color: #0000FF}    /<em> 选定的链接 </em>/<br>注释：在 CSS 定义中，a:hover 必须位于 a:link 和 a:visited 之后，这样才能生效！<br>注释：在 CSS 定义中，a:active 必须位于 a:hover 之后，这样才能生效！</p><p>text-decoration:none; 文字底部不带下划线</p><p>p:first-child {font-weight: bold;}<br>li:first-child {text-transform:uppercase;}<br>提示：最常见的错误是认为 p:first-child 之类的选择器会选择 p 元素的第一个子元素。<br>注释：必须声明 &lt;!DOCTYPE&gt;，这样 :first-child 才能在 IE 中生效。</p><p>p:first-letter<br>p:first-line</p><p>“:before” 伪元素可以在元素的内容前面插入新内容。<br>下面的例子在每个<code>&lt;h1&gt;</code> 元素前面插入一幅图片：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>:<span class="built_in">url</span>(logo.gif);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="built_in">url</span>(/i/w3school_logo_white.gif)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="块元素："><a href="#块元素：" class="headerlink" title="块元素："></a>块元素：</h3><p><code>&lt;h1&gt;</code> <code>&lt;p&gt;</code> <code>&lt;div&gt;</code></p><h3 id="使用-margin-属性来水平对齐"><a href="#使用-margin-属性来水平对齐" class="headerlink" title="使用 margin 属性来水平对齐"></a>使用 margin 属性来水平对齐</h3><p>可通过将左和右外边距设置为 “auto”，来对齐块元素。<br>除非已经声明了 !DOCTYPE，否则使用 margin:auto 在 IE8 以及更早的版本中是无效的。&lt;!DOCTYPE html&gt;<br>提示：如果宽度是 100%，则对齐没有效果</p><h3 id="使用-position-属性进行左和右对齐"><a href="#使用-position-属性进行左和右对齐" class="headerlink" title="使用 position 属性进行左和右对齐"></a>使用 position 属性进行左和右对齐</h3><p>.right<br>{<br>position:absolute;<br>right:0px;<br>width:300px;<br>background-color:#b0e0e6;<br>}</p><h3 id="跨浏览器兼容性问题"><a href="#跨浏览器兼容性问题" class="headerlink" title="跨浏览器兼容性问题"></a>跨浏览器兼容性问题</h3><p>当像这样对齐元素时，对 <body> 元素的外边距和内边距进行预定义是一个好主意。这样可以避免在不同的浏览器中出现可见的差异。<br>当使用 position 属性时，IE8 以及更早的版本存在一个问题。如果容器元素（在我们的案例中是 <div class="container">）设置了指定的宽度，<br>并且省略了 !DOCTYPE 声明，那么 IE8 以及更早的版本会在右侧增加 17px 的外边距。这似乎是为滚动条预留的空间。当使用 position 属性时，请始终设置 !DOCTYPE 声明：<br>body<br>{<br>margin:0;<br>padding:0;<br>} 好的习惯</div></body></p><h3 id="使用-float-属性来进行左和右对齐"><a href="#使用-float-属性来进行左和右对齐" class="headerlink" title="使用 float 属性来进行左和右对齐"></a>使用 float 属性来进行左和右对齐</h3><p>对齐元素的另一种方法是使用 float 属性：<br>实例<br>.right<br>{<br>float:right;<br>width:300px;<br>background-color:#b0e0e6;<br>}</p><h3 id="CSS尺寸属性"><a href="#CSS尺寸属性" class="headerlink" title="CSS尺寸属性:"></a>CSS尺寸属性:</h3><p>height        设置元素的高度。<br>line-height    设置行高。<br>max-height    设置元素的最大高度。<br>max-width    设置元素的最大宽度。<br>min-height    设置元素的最小高度。<br>min-width    设置元素的最小宽度。<br>width       设置元素的宽度。</p><p>span{display: block}<br>span显示成块级元素</p><p>p {display: inline}<br>p显示成行级元素</p><p>background-color 背景色<br>p {background-color: gray;}<br>background-color 不能继承，其默认值是 transparent。transparent 有“透明”之意。</p><p>background-image 背景图像<br>body {background-image: url(/i/eg_bg_04.gif);}</p><p>如果需要在页面上对背景图像进行平铺，可以使用 background-repeat 属性</p><h3 id="背景定位"><a href="#背景定位" class="headerlink" title="背景定位"></a>背景定位</h3><p>可以利用 background-position 属性改变图像在背景中的位置。<br>下面的例子在 body 元素中将一个背景图像居中放置：<br>body<br>  {<br>    background-image:url(‘/i/eg_bg_03.gif’);<br>    background-repeat:no-repeat;<br>    background-position:center;<br>  }<br>  top、bottom、left、right 和 center   or   background-position:50% 50%;</p><p>您可以通过 background-attachment 属性防止这种滚动。通过这个属性，<br>可以声明图像相对于可视区是固定的（fixed），因此不会受到滚动的影响：<br>background-attachment:fixed<br>background-attachment 属性的默认值是 scroll，也就是说，在默认的情况下，背景会随文档滚动。  </p><p>//cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.css</p><p>//cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js</p><p>text-indent 缩进</p><p>text-align 水平对齐<br>提示：将块级元素或表元素居中，要通过在这些元素上适当地设置左、右外边距来实现。</p><p>word-spacing 属性可以改变字（单词）之间的标准间隔。其默认值 normal 与设置值为 0 是一样的。</p><p>字母间隔<br>letter-spacing 属性与 word-spacing 的区别在于，字母间隔修改的是字符或字母之间的间隔。</p><p>text-transform 属性处理文本的大小写。这个属性有 4 个值：<br>none<br>uppercase<br>lowercase<br>capitalize 只对每个单词的首字母大写</p><p>text-decoration 有 5 个值：<br>none<br>underline<br>overline<br>line-through<br>blink</p><p>font-style 属性最常用于规定斜体文本。<br>该属性有三个值：<br>normal - 文本正常显示<br>italic - 文本斜体显示<br>oblique - 文本倾斜显示</p><h3 id="链接的四种状态："><a href="#链接的四种状态：" class="headerlink" title="链接的四种状态："></a>链接的四种状态：</h3><p>a:link - 普通的、未被访问的链接<br>a:visited - 用户已访问的链接<br>a:hover - 鼠标指针位于链接的上方<br>a:active - 链接被点击的时刻<br>当为链接的不同状态设置样式时，请按照以下次序规则：<br>a:hover 必须位于 a:link 和 a:visited 之后<br>a:active 必须位于 a:hover 之后</p><h3 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h3><p>text-decoration 属性大多用于去掉链接中的下划线：<br>实例<br>a:link {text-decoration:none;}<br>a:visited {text-decoration:none;}<br>a:hover {text-decoration:underline;}<br>a:active {text-decoration:underline;}</p><p>元素框的最内部分是实际的内容，直接包围内容的是内边距。内边距呈现了元素的背景。<br>内边距的边缘是边框。边框以外是外边距，外边距默认是透明的，因此不会遮挡其后的任何元素。<br>提示：背景应用于由内容和内边距、边框组成的区域。</p><p>img<br>{<br>position:absolute;<br>clip:rect(0px 50px 200px 0px)<br>}<br>clip显示一部分</p><p>img.top {vertical-align:text-top}<br>img.bottom {vertical-align:text-bottom}<br>与文字对齐的方式</p><h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>绝对布局脱离文档流，<br>相对布局不脱离文档流，相对自己原来的位置的移动。</p><p>浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止。<br>由于浮动框不在文档的普通流中，所以文档的普通流中的块框表现得就像浮动框不存在一样。<br>如果包含框太窄，无法容纳水平排列的三个浮动元素，那么其它浮动块向下移动，直到有足够的空间。如果浮动元素的高度不同，那么当它们向下移动时可能被其它浮动元素“卡住”：</p><p>float:<br>relative<br>通过为元素指定一个值，元素相对于其原来位置移动。也可以使用margin来达到同样的效果。<br>fixed<br>为元素指定相对于窗口的确切位置 。即使文档的其它元素出现滚动，元素位置仍然不变。<br>absolute<br>为元素指定相对于其父元素的确切位置。只有在父元素使用 relative, fixed or absolute 时才有效。你可以为任何父元素指定 position: relative;因为它不会产生移动。<br>static<br>默认值。当明确要关闭位置属性时使用。</p><p>块级布局:<br>div 是一个标准的块级元素。一个块级元素会新开始一行并且尽可能撑满容器。其他常用的块级元素包括 p 、 form<br>和HTML5中的新元素： header 、 footer 、 section 等等。</p><p>inline<br>span 是一个标准的行内元素。一个行内元素可以在段落中 <span> 像这样 </span> 包裹一些文字而不会打乱段落的布局。<br>a 元素是最常用的行内元素，它可以被用作链接。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>设置块级元素的 width 可以阻止它从左到右撑满容器。然后你就可以设置左右外边距为 auto 来使其水平居中。<br>元素会占据你所指定的宽度，然后剩余的宽度会一分为二成为左右外边距。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#main</span> &#123;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">600px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你设置一个元素为 box-sizing: border-box; 时，此元素的内边距和边框不再会增加它的宽度。<br>这里有一个与前一页相同的例子，唯一的区别是两个元素都设置了 box-sizing: border-box; ：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.simple</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  <span class="attribute">-webkit-box-sizing</span>: border-box;</span><br><span class="line">     <span class="attribute">-moz-box-sizing</span>: border-box;</span><br><span class="line">          <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">display</span><span class="selector-pseudo">:inline-block</span> 块状布局</span><br><span class="line"><span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>text-decoration:none; 去除链接下划线：</p>]]></content>
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jvm学习笔记</title>
      <link href="/2018/06/01/java/jvm-notepad/"/>
      <url>/2018/06/01/java/jvm-notepad/</url>
      <content type="html"><![CDATA[<p>深入java虚拟机</p><h3 id="本地方法是联系java程序和底层主机操作系统的连接方法。"><a href="#本地方法是联系java程序和底层主机操作系统的连接方法。" class="headerlink" title="本地方法是联系java程序和底层主机操作系统的连接方法。"></a>本地方法是联系java程序和底层主机操作系统的连接方法。</h3><p>如果自己实现本地方法,就要考虑到java的移植性问题了.大部分程序和软件之间都是socket通讯交互,所以在服务端的开发下,<br>几乎很少采用本地方法实现.</p><h3 id="多个类装载器的子系统。"><a href="#多个类装载器的子系统。" class="headerlink" title="多个类装载器的子系统。"></a>多个类装载器的子系统。</h3><h3 id="当装载的类引用了另外一个类，虚拟机就会使用装载第一个类的类装载器装载被引用的类。"><a href="#当装载的类引用了另外一个类，虚拟机就会使用装载第一个类的类装载器装载被引用的类。" class="headerlink" title="当装载的类引用了另外一个类，虚拟机就会使用装载第一个类的类装载器装载被引用的类。"></a>当装载的类引用了另外一个类，虚拟机就会使用装载第一个类的类装载器装载被引用的类。</h3><h3 id="在允许两个类型之间对包内可见的成员进行访问之前，虚拟机不但要确定这两个类型属于同一个包，"><a href="#在允许两个类型之间对包内可见的成员进行访问之前，虚拟机不但要确定这两个类型属于同一个包，" class="headerlink" title="在允许两个类型之间对包内可见的成员进行访问之前，虚拟机不但要确定这两个类型属于同一个包，"></a>在允许两个类型之间对包内可见的成员进行访问之前，虚拟机不但要确定这两个类型属于同一个包，</h3><p>还必须确认它们属于同一个运行时包—它们必须是由同一个类装载器装载的。</p><h3 id="由于软件和数据都是网络传输的，软件和数据的区别已经不那么明显了，软件和数据统称为neir。"><a href="#由于软件和数据都是网络传输的，软件和数据的区别已经不那么明显了，软件和数据统称为neir。" class="headerlink" title="由于软件和数据都是网络传输的，软件和数据的区别已经不那么明显了，软件和数据统称为neir。"></a>由于软件和数据都是网络传输的，软件和数据的区别已经不那么明显了，软件和数据统称为neir。</h3><h3 id="当启动一个java程序时，一个虚拟机实列也就诞生了。"><a href="#当启动一个java程序时，一个虚拟机实列也就诞生了。" class="headerlink" title="当启动一个java程序时，一个虚拟机实列也就诞生了。"></a>当启动一个java程序时，一个虚拟机实列也就诞生了。</h3><p>每个java程序运行于他们自己的java虚拟机实例中。</p><h3 id="在java虚拟机内部有两种线程：守护线程与非守护线程。"><a href="#在java虚拟机内部有两种线程：守护线程与非守护线程。" class="headerlink" title="在java虚拟机内部有两种线程：守护线程与非守护线程。"></a>在java虚拟机内部有两种线程：守护线程与非守护线程。</h3><h3 id="所有线程都共享方法区。"><a href="#所有线程都共享方法区。" class="headerlink" title="所有线程都共享方法区。"></a>所有线程都共享方法区。</h3><h3 id="两个线程都企图反问一个类，而类还没载入到虚拟机，"><a href="#两个线程都企图反问一个类，而类还没载入到虚拟机，" class="headerlink" title="两个线程都企图反问一个类，而类还没载入到虚拟机，"></a>两个线程都企图反问一个类，而类还没载入到虚拟机，</h3><p>这时只应该又一个线程去装载它，而另一个线程则只能等待。</p><h3 id="对于每一个被装载的类型，虚拟机都相应为它创建一个java-lang-Class类的实例，而且虚拟机还必须"><a href="#对于每一个被装载的类型，虚拟机都相应为它创建一个java-lang-Class类的实例，而且虚拟机还必须" class="headerlink" title="对于每一个被装载的类型，虚拟机都相应为它创建一个java.lang.Class类的实例，而且虚拟机还必须"></a>对于每一个被装载的类型，虚拟机都相应为它创建一个java.lang.Class类的实例，而且虚拟机还必须</h3><p>以莫种方式把这个实例和存储在方法区中的类型数据关联起来。</p><h3 id="Class类使得运行程序可以访问方法区中保存的信息。"><a href="#Class类使得运行程序可以访问方法区中保存的信息。" class="headerlink" title="Class类使得运行程序可以访问方法区中保存的信息。"></a>Class类使得运行程序可以访问方法区中保存的信息。</h3><h3 id="常量池中的符号引用替换为直接引用。"><a href="#常量池中的符号引用替换为直接引用。" class="headerlink" title="常量池中的符号引用替换为直接引用。"></a>常量池中的符号引用替换为直接引用。</h3><h3 id="一个句柄池和对象池。"><a href="#一个句柄池和对象池。" class="headerlink" title="一个句柄池和对象池。"></a>一个句柄池和对象池。</h3><h3 id="每个对象都有一个对象锁。"><a href="#每个对象都有一个对象锁。" class="headerlink" title="每个对象都有一个对象锁。"></a>每个对象都有一个对象锁。</h3><h3 id="每当启动一个新线程时，java虚拟机都会为它分配一个java栈。"><a href="#每当启动一个新线程时，java虚拟机都会为它分配一个java栈。" class="headerlink" title="每当启动一个新线程时，java虚拟机都会为它分配一个java栈。"></a>每当启动一个新线程时，java虚拟机都会为它分配一个java栈。</h3><h3 id="每当线程调用一个java方法时，虚拟机都会在该线程的java栈中压入一个新帧。而这个新帧自然就成了当前帧。"><a href="#每当线程调用一个java方法时，虚拟机都会在该线程的java栈中压入一个新帧。而这个新帧自然就成了当前帧。" class="headerlink" title="每当线程调用一个java方法时，虚拟机都会在该线程的java栈中压入一个新帧。而这个新帧自然就成了当前帧。"></a>每当线程调用一个java方法时，虚拟机都会在该线程的java栈中压入一个新帧。而这个新帧自然就成了当前帧。</h3><h3 id="如果一个类型在它的首次主动使用之前还没有被装载和连接的话，那它必须在此时被装载和连接，这样才能被初始化。"><a href="#如果一个类型在它的首次主动使用之前还没有被装载和连接的话，那它必须在此时被装载和连接，这样才能被初始化。" class="headerlink" title="如果一个类型在它的首次主动使用之前还没有被装载和连接的话，那它必须在此时被装载和连接，这样才能被初始化。"></a>如果一个类型在它的首次主动使用之前还没有被装载和连接的话，那它必须在此时被装载和连接，这样才能被初始化。</h3><h3 id="每一个class文件有一个常量池。"><a href="#每一个class文件有一个常量池。" class="headerlink" title="每一个class文件有一个常量池。"></a>每一个class文件有一个常量池。</h3><h3 id="在有双亲委派模式的情况下，启动类装载器可以抢在标准扩展类装载器之前去装载类，而标准扩展类装载器可以抢在类路径类装载器之前去装载那个类，类路径类装载器又可以抢在网络类装载器之前去装载它。"><a href="#在有双亲委派模式的情况下，启动类装载器可以抢在标准扩展类装载器之前去装载类，而标准扩展类装载器可以抢在类路径类装载器之前去装载那个类，类路径类装载器又可以抢在网络类装载器之前去装载它。" class="headerlink" title="在有双亲委派模式的情况下，启动类装载器可以抢在标准扩展类装载器之前去装载类，而标准扩展类装载器可以抢在类路径类装载器之前去装载那个类，类路径类装载器又可以抢在网络类装载器之前去装载它。"></a>在有双亲委派模式的情况下，启动类装载器可以抢在标准扩展类装载器之前去装载类，而标准扩展类装载器可以抢在类路径类装载器之前去装载那个类，类路径类装载器又可以抢在网络类装载器之前去装载它。</h3><h3 id="java虚拟机只把彼此访问的特殊权限授予由同意个类装载器载到同意个包中的类型。"><a href="#java虚拟机只把彼此访问的特殊权限授予由同意个类装载器载到同意个包中的类型。" class="headerlink" title="java虚拟机只把彼此访问的特殊权限授予由同意个类装载器载到同意个包中的类型。"></a>java虚拟机只把彼此访问的特殊权限授予由同意个类装载器载到同意个包中的类型。</h3><h3 id="java虚拟机：-抽象规范-一个具体的实现-一个运行中的虚拟机实例"><a href="#java虚拟机：-抽象规范-一个具体的实现-一个运行中的虚拟机实例" class="headerlink" title="java虚拟机： 抽象规范  一个具体的实现 一个运行中的虚拟机实例"></a>java虚拟机： 抽象规范  一个具体的实现 一个运行中的虚拟机实例</h3>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vscode快捷键</title>
      <link href="/2018/06/01/key/vscode-key/"/>
      <url>/2018/06/01/key/vscode-key/</url>
      <content type="html"><![CDATA[<p>Ctrl + - 代码跳转后返回<br>Ctrl + Shift + P，F1    显示命令面板 Show Command Palette<br>Ctrl + Shift + N    新窗口/实例 New window/instance<br>Ctrl + Shift + W    关闭窗口/实例 Close window/instance<br>Alt+ ↑ / ↓    向上/向下移动行 Move line up/down<br>Alt+ ↑ / ↓    向上/向下移动行 Move line up/down<br>Ctrl+Shift+K    删除行 Delete line</p><p>Ctrl+Enter    在下面插入行 Insert line below<br>Ctrl+Shift+Enter    在上面插入行 Insert line above<br>Ctrl+] / [    缩进/缩进行 Indent/outdent line<br>Home    转到行首 Go to beginning of line<br>End    转到行尾 Go to end of line<br>Ctrl+Home    转到文件开头 Go to beginning of file<br>Ctrl+End    转到文件末尾 Go to end of file</p><p>Ctrl+Home    转到文件开头 Go to beginning of file<br>Ctrl+End    转到文件末尾 Go to end of file<br>Ctrl+↑ / ↓    向上/向下滚动行 Scroll line up/down<br>Alt+PgUp / PgDown    向上/向下滚动页面 Scroll page up/down<br>Ctrl+Shift+[    折叠（折叠）区域 Fold (collapse) region<br>Ctrl+Shift+]    展开（未折叠）区域 Unfold (uncollapse) region</p><p>Ctrl+K Ctrl+0    折叠（折叠）所有区域 Fold (collapse) all regions<br>Ctrl+K Ctrl+J    展开（未折叠）所有区域 Unfold (uncollapse) all regions<br>Ctrl+K Ctrl+C    添加行注释 Add line comment<br>Ctrl+K Ctrl+U    删除行注释 Remove line comment<br>Ctrl+/    切换行注释 Toggle line comment</p><p>Ctrl + G    转到行… Go to Line…<br>Ctrl + P    转到文件… Go to File…<br>Ctrl + Shift + O    转到符号… Go to Symbol…<br>Ctrl + Shift + M    显示问题面板 Show Problems panel<br>F8    转到下一个错误或警告 Go to next error or warning<br>Shift + F8    转到上一个错误或警告 Go to previous error or warning<br>Ctrl + Shift + Tab</p><p>Ctrl + F    查找 Find<br>Ctrl + H    替换 Replace<br>Ctrl+W 关闭编辑器 Close editor<br>Ctrl+ 1 / 2 / 3    聚焦到第1，第2或第3编辑器组 Focus into 1st, 2nd or 3rd editor group</p><p>F11    切换全屏 Toggle full screen<br>Shift+Alt+1    切换编辑器布局 Toggle editor layout<br>Ctrl+ = / -    放大/缩小 Zoom in/out<br>Ctrl+B    切换侧栏可见性 Toggle Sidebar visibility<br>Ctrl+Shift+E    显示浏览器/切换焦点 Show Explorer / Toggle focus<br>Ctrl+Shift+F    显示搜索 Show Search<br>Ctrl+Shift+G    显示Git Show Git<br>Ctrl+Shift+D    显示调试 Show Debug<br>Ctrl+Shift+X    显示扩展 Show Extensions<br>Ctrl+Shift+H    替换文件 Replace in files<br>Ctrl+Shift+J    切换搜索详细信息 Toggle Search details<br>Ctrl+Shift+C    打开新命令提示符/终端 Open new command prompt/terminal<br>Ctrl+Shift+U    显示输出面板 Show Output panel<br>Ctrl+Shift+V    切换Markdown预览 Toggle Markdown preview<br>Ctrl+K V    从旁边打开Markdown预览 Open Markdown preview to the side</p>]]></content>
      
      <categories>
          
          <category> key </category>
          
      </categories>
      
      
        <tags>
            
            <tag> key </tag>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>fedora学习笔记</title>
      <link href="/2018/06/01/linux/fedora-notepad/"/>
      <url>/2018/06/01/linux/fedora-notepad/</url>
      <content type="html"><![CDATA[<p>@yum自动补全<br>安装sudo yum install bash-completion.noarch<br>在/etc/bash下添加<br>if [ -f /etc/bash_completion ]; then<br>. /etc/bash_completion<br>fi</p><p>@fedora 修改为中文<br>vi /etc/sysconfig/i18n<br>内容：<br>LANG=”zh_CN.UTF-8”<br>SYSFONT=”latarcyrheb-sun16”</p><p>@配置开机启动服务<br>/sbin/c httpd on [设置apahce服务器httpd服务开机启动]<br>/sbin/chkconfig –add mysqld [在服务清单中添加mysql服务]<br>/sbin/chkconfig mysqld on             [设置mysql服务开机启动]</p><p>/sbin/service httpd start [启动httpd服务,与开机启动无关]<br>/sbin/service mysqld start [启动mysql服务,与开机无关]</p><p>@fedora 无法播放mp3 mp3解码器无法下载<br><a href="http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm" target="_blank" rel="noopener">http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-stable.noarch.rpm</a><br>下载这个包，安装之后就能搜到解码器了。</p><p>@service 方式<br>开启： service iptables start<br>关闭： service iptables stop</p><p>@用户添加sudo权限;<br>我们vi /etc/sudoers<br>我们要让某用户拥有root所有权限： yuyu ALL=(ALL)ALL    （这句意思是 yuyu 用户 在所有主机中 拥有所有root用户命令权限）</p><p>su root<br>visudo命令，<br>将83 行%wheel ALL=(ALL) ALL的注释去掉（注意，后面没有NOPASSWORD），<br>然后，把你当前的用户添加到wheel的用户组（编辑/etc/group文件，在wheel后面加上你的用户名，用“,”隔开），ok，<br>这样你就可以用sudo执行任何root的命令了，当然，你得知道root的密码，<br>不要密码就在最后一个ALL后面加上一个NOPASSWORD（不推荐）。</p><p>注：添加用户到组<br>usermod -g  wheel yuyu</p><p>rpm -q python<br>查看Python是否安装,安装的版本是多少?</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> fedora </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux下常用命令</title>
      <link href="/2018/06/01/linux/linux-commands/"/>
      <url>/2018/06/01/linux/linux-commands/</url>
      <content type="html"><![CDATA[<h3 id="查看磁盘空间"><a href="#查看磁盘空间" class="headerlink" title="查看磁盘空间"></a>查看磁盘空间</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df -h  <span class="comment">#总的磁盘空间</span></span><br><span class="line">du -h  /opt  <span class="comment">#具体目录空间</span></span><br></pre></td></tr></table></figure><h3 id="权限文件转让"><a href="#权限文件转让" class="headerlink" title="权限文件转让"></a>权限文件转让</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown jboss:jboss  文件名</span><br></pre></td></tr></table></figure><h3 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget  下载地址</span><br></pre></td></tr></table></figure><h3 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> ll=<span class="string">'ls -alF'</span></span><br></pre></td></tr></table></figure><h3 id="后台运行，关闭终端后还能运行"><a href="#后台运行，关闭终端后还能运行" class="headerlink" title="后台运行，关闭终端后还能运行"></a>后台运行，关闭终端后还能运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup /root/start.sh &amp;</span><br></pre></td></tr></table></figure><h3 id="查看占用端口的进程id"><a href="#查看占用端口的进程id" class="headerlink" title="查看占用端口的进程id"></a>查看占用端口的进程id</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -apn |grep port</span><br></pre></td></tr></table></figure><h3 id="watch-1s间隔"><a href="#watch-1s间隔" class="headerlink" title="watch 1s间隔"></a>watch 1s间隔</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 1 -d netstat -ant</span><br></pre></td></tr></table></figure><h3 id="比较2个文件差异"><a href="#比较2个文件差异" class="headerlink" title="比较2个文件差异"></a>比较2个文件差异</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">diff -u 1.txt 2.txt  &gt; diff.txt</span><br></pre></td></tr></table></figure><h3 id="清空日志内容"><a href="#清空日志内容" class="headerlink" title="清空日志内容"></a>清空日志内容</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /dev/null &gt; /var/<span class="built_in">log</span>/wtmp</span><br></pre></td></tr></table></figure><h3 id="禁止标准输出和标准错误的输出"><a href="#禁止标准输出和标准错误的输出" class="headerlink" title="禁止标准输出和标准错误的输出."></a>禁止标准输出和标准错误的输出.</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat <span class="variable">$filename</span> 2&gt;/dev/null &gt;/dev/null</span><br></pre></td></tr></table></figure><h3 id="查看ulimit"><a href="#查看ulimit" class="headerlink" title="查看ulimit"></a>查看ulimit</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ulimit</span> -a <span class="comment">#看到最大文件数是1024，</span></span><br><span class="line"><span class="built_in">ulimit</span> -n 4096 <span class="comment">#将其更改大点</span></span><br></pre></td></tr></table></figure><h3 id="分割文件和并文件"><a href="#分割文件和并文件" class="headerlink" title="分割文件和并文件"></a>分割文件和并文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">split -b 20m RevolutionOS.rmvb RevOS_part_</span><br><span class="line"></span><br><span class="line">cat RevOS_part_* &gt; RevolutionOS_RSB.rmvb</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux下刻录镜像</title>
      <link href="/2018/06/01/linux/linux-record/"/>
      <url>/2018/06/01/linux/linux-record/</url>
      <content type="html"><![CDATA[<p>在命令行下可以用cdrecord刻录光盘镜像，今天刻录了张debian的光盘，用以下的命令</p><p>cdrecord -v speed=4 dev=1,0,0 /data/iso/debian-6.0.0-i386-CD-1.iso<br>dev=1,0,0这个参数可以用</p><p>drecord -scanbus<br>这个命令得到，<br>lds@lidashuang:~$ cdrecord -scanbus<br>scsibus1:<br>    1,0,0    100) ‘Optiarc ‘ ‘DVD RW AD-7700S ‘ ‘A815’ Removable CD-ROM<br>    1,1,0    101) *</p><p>一些参数解释<br>-v 指详细方式<br>-eject 在完成写任务后弹出盘<br>-speed 指定写速度（8）<br>-dev 是从 cdrecord -scanbus 获得的设备号（0,1,0）<br>最后一个是所烧录的映像的名称（test.iso）</p><p>mkisofs -r -o sample.iso my_private 做成iso文件，-r代表将所有的文件属性变成对所有人是可读属性的，-o代表输出。<br>sudo mount -o loop -t iso9660 /home/guandl/Ubuntu-8.04.1-dvd-i386.iso /cdrom</p><p>dd if=xxx.iso of=/dev/sdb1 bs=1M</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu的ssh认证慢</title>
      <link href="/2018/06/01/linux/ubuntu-ssh-slow/"/>
      <url>/2018/06/01/linux/ubuntu-ssh-slow/</url>
      <content type="html"><![CDATA[<p>经常用ubuntu的朋友们可以已经习惯了一个事实<br>那就是,通过ssh登录到ubuntu,登录认证的时间总要用掉10多秒甚至20多秒30秒,<br>可能你已经习惯了这个事实,<br>但是,其实,这个漫长的等待时间完全是可以免掉的,怎么免,且看下面</p><h3 id="步骤一-关闭ssh的gssapi认证"><a href="#步骤一-关闭ssh的gssapi认证" class="headerlink" title="步骤一 关闭ssh的gssapi认证"></a>步骤一 关闭ssh的gssapi认证</h3><p>vi /etc/ssh/ssh_config<br>注释掉如下两行<br>GSSAPIAuthentication yes<br>GSSAPIDelegateCredentials no</p><h3 id="步骤二-关闭ssh的UseDNS"><a href="#步骤二-关闭ssh的UseDNS" class="headerlink" title="步骤二 关闭ssh的UseDNS"></a>步骤二 关闭ssh的UseDNS</h3><p>vi /etc/ssh/sshd_config<br>注：ubuntu的sshd_config文件没有UseDNS参数,而据我了解,其它类<em>NIX、</em>BSD操作系统的sshd_config都有UseDNS参数，<br>且它们缺省都是”UseDNS yes”，<br>那估计ubuntu的sshd_config虽然没有UseDNS，那它缺省也是”UseDNS yes”了<br>于是，在sshd_config末尾处插入如下行<br>UseDNS no</p><p>然后执行指令”/etc/init.d/ssh restart”，重启ssh服务，配置生效</p><p>经测试，使用此方法后，ubuntu的认证时间大大缩短，原来其登录认证一般耗时在10秒以上15秒左右，有些时候甚至达到20多秒到30秒左右，<br>而经过此修改，ubuntu的登录认证时间将会缩短在3秒以内。</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>go-string</title>
      <link href="/2018/06/01/script/go-string/"/>
      <url>/2018/06/01/script/go-string/</url>
      <content type="html"><![CDATA[<p>go语言字符串操作</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str <span class="keyword">string</span> = <span class="string">"Hello,World"</span></span><br><span class="line"><span class="comment">//1.获取字符串的第一个字母</span></span><br><span class="line">fmt.Printf(<span class="string">"1.获取字符串的第一个字母:%c\n"</span>, str[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取字符串的第二和第三个字母</span></span><br><span class="line">fmt.Printf(<span class="string">"2.获取字符串的第二和第三个字母:%s\n"</span>, str[<span class="number">1</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取字符串的最后一个字母</span></span><br><span class="line">fmt.Printf(<span class="string">"3.获取字符串的最后一个字母:%c\n"</span>, str[<span class="built_in">len</span>(str)<span class="number">-1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.字符串开头字母判断</span></span><br><span class="line"><span class="keyword">if</span> str[:<span class="number">5</span>] == <span class="string">"Hello"</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"4.字符串开头字母比较:以Hello开头\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.字符串结尾字母判断</span></span><br><span class="line"><span class="keyword">if</span> str[<span class="built_in">len</span>(str)<span class="number">-5</span>:<span class="built_in">len</span>(str)] == <span class="string">"World"</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"5.字符串结尾字母比较:以World结尾\n"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.获取字符串长度</span></span><br><span class="line">fmt.Printf(<span class="string">"6.获取字符串长度:%d\n"</span>, <span class="built_in">len</span>(str))</span><br><span class="line"></span><br><span class="line"><span class="comment">/*//7.大小写转换</span></span><br><span class="line"><span class="comment">System.out.println("7.大小写转换:"+str.toUpperCase()+","+str.toLowerCase());</span></span><br><span class="line"><span class="comment">//8.字符串转int,int转字符串</span></span><br><span class="line"><span class="comment">System.out.println("8.字符串转int,int转字符串:"+Integer.parseInt("100")+","+String.valueOf(100));</span></span><br><span class="line"><span class="comment">//9.分割字符串</span></span><br><span class="line"><span class="comment">String[] strs = str.split(",");</span></span><br><span class="line"><span class="comment">System.out.println("9.分割字符串:"+"["+strs[0]+","+strs[1]+"]");</span></span><br><span class="line"><span class="comment">//10.判断字符串是否包含</span></span><br><span class="line"><span class="comment">if(str.contains("o,W"))&#123;</span></span><br><span class="line"><span class="comment">System.out.println("10.分割字符串:包含o,W");</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>go学习笔记</title>
      <link href="/2018/06/01/script/golang-notepad/"/>
      <url>/2018/06/01/script/golang-notepad/</url>
      <content type="html"><![CDATA[<h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello,world"></a>hello,world</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> fmt</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fmt.Printf(<span class="string">"Hello,World\n"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="字符串多行"><a href="#字符串多行" class="headerlink" title="字符串多行"></a>字符串多行</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m <span class="keyword">string</span></span><br><span class="line">m :=<span class="string">`Hello</span></span><br><span class="line"><span class="string">world`</span></span><br></pre></td></tr></table></figure><h3 id="分组写法"><a href="#分组写法" class="headerlink" title="分组写法"></a>分组写法</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">var</span>(</span><br><span class="line">i <span class="keyword">int</span></span><br><span class="line">pi <span class="keyword">float32</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [<span class="number">10</span>] <span class="keyword">int</span> </span><br><span class="line">arr[<span class="number">0</span>]=<span class="number">42</span></span><br><span class="line">arr := [<span class="number">3</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125; or arr := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers <span class="keyword">map</span>[<span class="keyword">string</span>] <span class="keyword">int</span></span><br><span class="line">numbers := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br><span class="line">numbers := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span> &#123;<span class="string">"one"</span>:<span class="number">1</span>,<span class="string">"two"</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="built_in">delete</span>(numbers,<span class="string">"one"</span>) <span class="comment">//删除key为one的元素</span></span><br><span class="line">numbers[<span class="string">"one"</span>]=<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">SumAndProduct</span><span class="params">(A,B <span class="keyword">int</span>)</span> <span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> A+B,A*B</span><br><span class="line">&#125;</span><br><span class="line">x,y = SumAndProduct(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><h3 id="延迟语句"><a href="#延迟语句" class="headerlink" title="延迟语句"></a>延迟语句</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file.Open(<span class="string">"/file"</span>)</span><br><span class="line"><span class="keyword">defer</span> file.Close() <span class="comment">//多个的话是后进先出</span></span><br></pre></td></tr></table></figure><h3 id="函数作为值，类型"><a href="#函数作为值，类型" class="headerlink" title="函数作为值，类型"></a>函数作为值，类型</h3><p>type testInfo func(int) bool<br>f testInfo    f(x)</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> person <span class="keyword">struct</span>&#123;</span><br><span class="line">name <span class="keyword">string</span></span><br><span class="line">age <span class="keyword">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="import-xxxxx"><a href="#import-xxxxx" class="headerlink" title="import _xxxxx"></a>import _xxxxx</h3><p>import 下划线（如：import _ hello/imp）的作用：当导入一个包时，该包下的文件里所有init()函数都会被执行，<br>然而，有些时候我们并不需要把整个包都导入进来，仅仅是是希望它执行init()函数而已。这个时候就可以使用 import _ 引用该包。<br>即使用【import _ 包路径】只是引用该包，仅仅是为了调用init()函数，所以无法通过包名来调用包中的其他函数。</p>]]></content>
      
      <categories>
          
          <category> 程序语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 程序语言 </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java-string</title>
      <link href="/2018/06/01/script/java-string/"/>
      <url>/2018/06/01/script/java-string/</url>
      <content type="html"><![CDATA[<p>java语言字符串操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/****************************************</span></span><br><span class="line"><span class="comment"> * String操作－java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yu jian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>  1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2011/06/27</span></span><br><span class="line"><span class="comment"> ****************************************/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Java_String</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">String str=<span class="string">"Hello,World"</span>;</span><br><span class="line"><span class="comment">//1.获取字符串的第一个字母</span></span><br><span class="line">String s = str.substring(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"1.获取字符串的第一个字母:"</span>+s);</span><br><span class="line"><span class="comment">//2.获取字符串的第二和第三个字母</span></span><br><span class="line">s=str.substring(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">System.out.println(<span class="string">"2.获取字符串的第二和第三个字母:"</span>+s);</span><br><span class="line"><span class="comment">//3.获取字符串的最后一个字母</span></span><br><span class="line">s=str.substring(str.length()-<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"3.获取字符串的最后一个字母:"</span>+s);</span><br><span class="line"><span class="comment">//4.字符串开头字母判断</span></span><br><span class="line"><span class="keyword">if</span>(str.startsWith(<span class="string">"Hello"</span>))&#123;</span><br><span class="line">System.out.println(<span class="string">"4.字符串开头字母比较:以Hello开头"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.字符串结尾字母判断</span></span><br><span class="line"><span class="keyword">if</span>(str.endsWith(<span class="string">"World"</span>))&#123;</span><br><span class="line">System.out.println(<span class="string">"5.字符串结尾字母比较:以World结尾"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.获取字符串长度</span></span><br><span class="line">System.out.println(<span class="string">"6.获取字符串长度:"</span>+str.length());</span><br><span class="line"><span class="comment">//7.大小写转换</span></span><br><span class="line">System.out.println(<span class="string">"7.大小写转换:"</span>+str.toUpperCase()+<span class="string">","</span>+str.toLowerCase());</span><br><span class="line"><span class="comment">//8.字符串转int,int转字符串</span></span><br><span class="line">System.out.println(<span class="string">"8.字符串转int,int转字符串:"</span>+Integer.parseInt(<span class="string">"100"</span>)+<span class="string">","</span>+String.valueOf(<span class="number">100</span>));</span><br><span class="line"><span class="comment">//9.分割字符串</span></span><br><span class="line">String[] strs = str.split(<span class="string">","</span>);</span><br><span class="line">System.out.println(<span class="string">"9.分割字符串:"</span>+<span class="string">"["</span>+strs[<span class="number">0</span>]+<span class="string">","</span>+strs[<span class="number">1</span>]+<span class="string">"]"</span>);</span><br><span class="line"><span class="comment">//10.判断字符串是否包含</span></span><br><span class="line"><span class="keyword">if</span>(str.contains(<span class="string">"o,W"</span>))&#123;</span><br><span class="line">System.out.println(<span class="string">"10.分割字符串:包含o,W"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>makefile学习笔记</title>
      <link href="/2018/06/01/script/makefile-notepad/"/>
      <url>/2018/06/01/script/makefile-notepad/</url>
      <content type="html"><![CDATA[<p>gnu-make学习 </p><h3 id="在makefile中的命令，必须要以【Tab】-键开始"><a href="#在makefile中的命令，必须要以【Tab】-键开始" class="headerlink" title="在makefile中的命令，必须要以【Tab】 键开始"></a>在makefile中的命令，必须要以【Tab】 键开始</h3><h3 id="make命令会在当前目录顺序找寻”GNUmakefile”-”makefile”-”Makefile”文件，"><a href="#make命令会在当前目录顺序找寻”GNUmakefile”-”makefile”-”Makefile”文件，" class="headerlink" title="make命令会在当前目录顺序找寻”GNUmakefile”,”makefile”,”Makefile”文件，"></a>make命令会在当前目录顺序找寻”GNUmakefile”,”makefile”,”Makefile”文件，</h3><p>如果要制定文件，加 -f 或者 –file参数  如make -f Make.Linux </p><h3 id="其中的foo-c可以省略-gcc也可以省略-make会自动推导"><a href="#其中的foo-c可以省略-gcc也可以省略-make会自动推导" class="headerlink" title="其中的foo.c可以省略,gcc也可以省略, make会自动推导"></a>其中的foo.c可以省略,gcc也可以省略, make会自动推导</h3><p>foo.o : foo.c defs.h<br>    gcc -c -g foo.c</p><h3 id="如果命令太长可以使用反斜框’-’作为换行符"><a href="#如果命令太长可以使用反斜框’-’作为换行符" class="headerlink" title="如果命令太长可以使用反斜框’\’作为换行符"></a>如果命令太长可以使用反斜框’\’作为换行符</h3><h3 id="objects-wildcard-o-objects-代表所有-o文件的集合"><a href="#objects-wildcard-o-objects-代表所有-o文件的集合" class="headerlink" title="objects := $(wildcard *.o)   # objects 代表所有.o文件的集合"></a>objects := $(wildcard *.o)   # objects 代表所有.o文件的集合</h3><h3 id="VPATH变量"><a href="#VPATH变量" class="headerlink" title="VPATH变量"></a>VPATH变量</h3><p>make在当前的目录中找寻依赖文件和目标文件，如果找不到并且定义了VPATH变量，make会在值目录下去寻找文件<br>VPATH = src:src/test </p><h3 id="PHONY显示指明一个目标是伪目标"><a href="#PHONY显示指明一个目标是伪目标" class="headerlink" title=".PHONY显示指明一个目标是伪目标"></a>.PHONY显示指明一个目标是伪目标</h3><p>.PHONY:clean<br>clean:<br>    rm -rf *.o</p><h3 id="«表示所有的依赖目标集（也就是”foo-c-bar-c”）"><a href="#«表示所有的依赖目标集（也就是”foo-c-bar-c”）" class="headerlink" title="$«表示所有的依赖目标集（也就是”foo.c bar.c”）"></a>$«表示所有的依赖目标集（也就是”foo.c bar.c”）</h3><p>$@表示目标集(也就是”foo.o bar.o”) </p><h3 id="object-foo-o-bar-o"><a href="#object-foo-o-bar-o" class="headerlink" title="object=foo.o bar.o"></a>object=foo.o bar.o</h3><p>all:$(objects)<br>$(objects):%.o:%.c<br>$(CC) -c $(CFLAGS) $« -o $@<br>等价于<br>foo.o:foo.c<br>$(CC) -c $(CFLAGS) foo.c -o foo.o<br>bar.o:bar.c<br>$(CC) -c $(CFLAGS) bar.c -o bar.o </p><h3 id="files-foo-elc-bar-o-lose-o"><a href="#files-foo-elc-bar-o-lose-o" class="headerlink" title="files=foo.elc bar.o lose.o"></a>files=foo.elc bar.o lose.o</h3><p>$(filter %.o,$(files)):%.o:%.c<br>fileter函数过滤，只去%.o的内容 </p><h3 id="查找源文件依赖-g-MM-main-c"><a href="#查找源文件依赖-g-MM-main-c" class="headerlink" title="查找源文件依赖 g++ -MM main.c"></a>查找源文件依赖 g++ -MM main.c</h3><p>输出main.o:main.c defs.h </p><h3 id="findstring-a-a-b-c-返回-a"><a href="#findstring-a-a-b-c-返回-a" class="headerlink" title="$(findstring a,a b c)  返回 a"></a>$(findstring a,a b c)  返回 a</h3><p>$(findstring a,b c)  返回 “” </p><h3 id="word-2-foo-bar-baz-返回值是”bar”"><a href="#word-2-foo-bar-baz-返回值是”bar”" class="headerlink" title="$(word 2,foo bar baz) 返回值是”bar”"></a>$(word 2,foo bar baz) 返回值是”bar”</h3><h3 id="sources-foo-c-bar-c"><a href="#sources-foo-c-bar-c" class="headerlink" title="sources = foo.c bar.c"></a>sources = foo.c bar.c</h3><p>include $(sources:.c=.d)<br>上述语句中的“$(sources:.c=.d)”中的“.c=.d”的意思是做一个替换,把变量<br>$(sources)所有[.c]的字串都替换成[.d],关于这个“替换”的内容</p>]]></content>
      
      <categories>
          
          <category> 程序语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cpp </tag>
            
            <tag> makefile </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python-io</title>
      <link href="/2018/06/01/script/python-io/"/>
      <url>/2018/06/01/script/python-io/</url>
      <content type="html"><![CDATA[<p>python的io操作</p><pre><code class="python"><span class="comment">#!/usr/bin/python</span><span class="comment"># -*- coding: utf-8 -*-</span><span class="comment">#1.写文件</span>f=open(<span class="string">"/home/yuyu/1.txt"</span>,<span class="string">"w"</span>) <span class="comment">#追加写a代替w</span>f.write(<span class="string">'1.写文件\n'</span>)f.close()<span class="comment">#2.读文件</span>f=open(<span class="string">"/home/yuyu/1.txt"</span>,<span class="string">"r"</span>)<span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():    <span class="keyword">print</span> linef.close()    <span class="comment">#2.命令行输入：</span>num = raw_input(<span class="string">'Now enter a number: '</span>)<span class="comment">#命令行输出</span><span class="keyword">print</span> <span class="string">"hello"</span><span class="comment">#获取当前路径</span>os.path.split(os.path.realpath(__file__))[<span class="number">0</span>]   <span class="comment">#复制文件与复制目录</span><span class="keyword">import</span> shutilshutil.copyfile(<span class="string">'yu.py'</span>, <span class="string">'/home/yuyu/yu.py'</span>)shutil.copytree(<span class="string">'/home/yuyu/dir1'</span>, <span class="string">'/home/yuyu/dir2'</span>)<span class="comment">#读取网页</span><span class="keyword">import</span> urllibparams = urllib.urlencode({<span class="string">'spam'</span>: <span class="number">1</span>, <span class="string">'eggs'</span>: <span class="number">2</span>, <span class="string">'bacon'</span>: <span class="number">0</span>}) <span class="comment">#参数</span>f = urllib.urlopen(<span class="string">"http://www.musi-cal.com/cgi-bin/query"</span>, params) <span class="comment">#post</span><span class="keyword">print</span> f.read()<span class="comment">#目录下的文件信息</span>listfile=os.listdir(default_list_path)<span class="keyword">for</span> line <span class="keyword">in</span> listfile:     //打印文件的name    <span class="keyword">print</span> line</code></pre>]]></content>
      
      <categories>
          
          <category> 程序语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> io </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python-string</title>
      <link href="/2018/06/01/script/python-string/"/>
      <url>/2018/06/01/script/python-string/</url>
      <content type="html"><![CDATA[<p>python字符串操作</p><pre><code class="python"><span class="comment">#!/usr/bin/python</span><span class="comment"># -*- coding: utf-8 -*-</span>_str=<span class="string">"Hello,World"</span><span class="comment">#1.获取字符串的第一个字母</span><span class="keyword">print</span> <span class="string">"1.获取字符串的第一个字母:"</span>+_str[<span class="number">0</span>]<span class="comment">#2.获取字符串的第二和第三个字母</span><span class="keyword">print</span> <span class="string">"2.获取字符串的第二和第三个字母:"</span>+_str[<span class="number">1</span>:<span class="number">3</span>]<span class="comment">#3.获取字符串的最后一个字母</span><span class="keyword">print</span> <span class="string">"3.获取字符串的最后一个字母:"</span>+_str[<span class="number">-1</span>]<span class="comment">#4.字符串开头字母判断</span><span class="keyword">if</span> _str.startswith(<span class="string">'Hello'</span>):    <span class="keyword">print</span> <span class="string">"4.字符串开头字母比较:以Hello开头"</span><span class="comment">#5.字符串结尾字母判断</span><span class="keyword">if</span> _str.endswith(<span class="string">'World'</span>):    <span class="keyword">print</span> <span class="string">"5.字符串结尾字母比较:以World结尾"</span><span class="comment">#6.获取字符串长度</span><span class="keyword">print</span> <span class="string">"6.获取字符串长度:"</span>+str(len(_str))<span class="comment">#7.大小写转换</span><span class="keyword">print</span> <span class="string">"7.大小写转换:"</span>+_str.upper()+<span class="string">","</span>+_str.lower()<span class="comment">#8.字符串转int,int转字符串</span><span class="keyword">print</span> <span class="string">"8.字符串转int,int转字符串:"</span>+str(int(<span class="string">"100"</span>))+<span class="string">","</span>+str(<span class="number">100</span>)<span class="comment">#9.分割字符串</span><span class="keyword">print</span> <span class="string">"9.分割字符串:["</span>+_str.split(<span class="string">','</span>)[<span class="number">0</span>]+<span class="string">","</span>+_str.split(<span class="string">','</span>)[<span class="number">1</span>]+<span class="string">"]"</span><span class="comment">#10.判断字符串是否包含</span><span class="keyword">if</span> _str.find(<span class="string">'o,W'</span>)!=<span class="number">-1</span>:    <span class="keyword">print</span> <span class="string">"10.分割字符串:包含o,W"</span></code></pre>]]></content>
      
      <categories>
          
          <category> 程序语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> string </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vue学习笔记</title>
      <link href="/2018/06/01/html/vue-notepad/"/>
      <url>/2018/06/01/html/vue-notepad/</url>
      <content type="html"><![CDATA[<h3 id="v-bind-缩写"><a href="#v-bind-缩写" class="headerlink" title="v-bind 缩写"></a>v-bind 缩写</h3><pre><code>* &lt;!-- 完整语法 --&gt;* &lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;* &lt;!-- 缩写 --&gt;* &lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;</code></pre><h3 id="v-on-缩写"><a href="#v-on-缩写" class="headerlink" title="v-on 缩写"></a>v-on 缩写</h3><pre><code>* &lt;!-- 完整语法 --&gt;* &lt;a v-on:click=&quot;doSomething&quot;&gt;&lt;/a&gt;* &lt;!-- 缩写 --&gt;* &lt;a @click=&quot;doSomething&quot;&gt;&lt;/a&gt;</code></pre><h6 id="当你在一个定制的组件上用到-class-属性的时候，这些类将被添加到根元素上面，这个元素上已经存在的类不会被覆盖。"><a href="#当你在一个定制的组件上用到-class-属性的时候，这些类将被添加到根元素上面，这个元素上已经存在的类不会被覆盖。" class="headerlink" title="当你在一个定制的组件上用到 class 属性的时候，这些类将被添加到根元素上面，这个元素上已经存在的类不会被覆盖。"></a>当你在一个定制的组件上用到 class 属性的时候，这些类将被添加到根元素上面，这个元素上已经存在的类不会被覆盖。</h6>]]></content>
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>从jar中查找class</title>
      <link href="/2018/06/01/toolsCode/find-jar-by-class/"/>
      <url>/2018/06/01/toolsCode/find-jar-by-class/</url>
      <content type="html"><![CDATA[<h2 id="代码-bin-findjar-py"><a href="#代码-bin-findjar-py" class="headerlink" title="代码:bin_findjar.py"></a>代码:bin_findjar.py</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python  </span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-  </span></span><br><span class="line"><span class="comment">#######################################  </span></span><br><span class="line"><span class="comment">#参数1  jar的路径  </span></span><br><span class="line"><span class="comment">#参数2  class的关键字  </span></span><br><span class="line"><span class="comment">########################################  </span></span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> sys  </span><br><span class="line">path=<span class="string">""</span>  </span><br><span class="line"><span class="keyword">if</span> len(sys.argv)&gt;= <span class="number">3</span>:  </span><br><span class="line">    path=sys.argv[<span class="number">1</span>]  </span><br><span class="line">    value=sys.argv[<span class="number">2</span>].strip()  </span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">    <span class="keyword">print</span> <span class="string">"参数有误。。。"</span>  </span><br><span class="line">    sys.exit()  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> os.listdir(path):  </span><br><span class="line">    <span class="keyword">if</span> d.endswith(<span class="string">"jar"</span>):  </span><br><span class="line">        <span class="comment">#print "unzip -l "+ path+"/"+d+" | grep "+value  </span></span><br><span class="line">        pipe=os.popen(<span class="string">"unzip -l "</span>+ path+<span class="string">"/"</span>+d+<span class="string">" | grep "</span>+value)  </span><br><span class="line">        string= pipe.read()  </span><br><span class="line">        pipe.close()  </span><br><span class="line">        <span class="keyword">if</span> len(string)&lt;=<span class="number">0</span>:  </span><br><span class="line">            <span class="keyword">pass</span>  </span><br><span class="line">        <span class="keyword">else</span>:  </span><br><span class="line">            <span class="keyword">print</span> <span class="string">"path:"</span>+d  </span><br><span class="line">            <span class="keyword">print</span> string  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果:"></a>运行结果:</h2><pre><code class="bash">./bin_findjar.py ~/.m2/repository/org/yu/util/yuutil/1.0/ DbHelper      817  06-29-2017 19:59   org/yu/util/db/DbHelper<span class="variable">$1</span>.class     4758  06-29-2017 19:59   org/yu/util/db/DbHelper.class</code></pre>]]></content>
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vi学习笔记</title>
      <link href="/2018/06/01/tools/vi-notepad/"/>
      <url>/2018/06/01/tools/vi-notepad/</url>
      <content type="html"><![CDATA[<h3 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h3><p>G 移动到这个档案的最后一行(常用)  L 游标移动到这个萤幕的最下方那一行<br>H 游标移动到这个萤幕的最上方那一行  M 游标移动到这个萤幕的中央那一行<br>n +/- G 跳转到指定行</p><p>(ctrl+g)显示信息显示了你正在编辑的文件名,当前光标所在行的行号,总的行数<br>如test.c 104 行 –100%–</p><p>命令模式下($),光标移动到行尾;命令模式下数字0,光标移动到行首<br>(n+space) 那个n表示数字,例如10,光标会向右移动这一行的n个字元。</p><p>向上翻半屏 (crtl+u);向下翻半屏 (crtl+d)<br>(Ctrl+f)向文件尾翻一屏;(Ctrl＋b)向文件首翻一屏 </p><p>(f+字母)会在光标当前行当前处后搜索指定的字母，找到则定位到该字母处，如果找不到，光标不移动<br>(n+f+字母)同上，n表示数字，定位在第n次找到的字母，如果找不到，光标不移动</p><p>命令模式下(i)切换为输入模式，光标在当前位置 (a)则在当前光标的后一位</p><h3 id="保存与退出"><a href="#保存与退出" class="headerlink" title="保存与退出"></a>保存与退出</h3><p>(:q!)不保存退出<br>(:wq)保存并退出<br>命令模式下ZZ保存并退出<br>(:w)保存命令</p><h3 id="行号和删除"><a href="#行号和删除" class="headerlink" title="行号和删除"></a>行号和删除</h3><p>(:set number) 显示行号;(:set nonumber) 取消显示行号<br>(:set ruler)  右下方显示行与列<br>命令模式下(u)–&gt;取消前面刚执行过的插入或者删除命令 (ctrl+r)反转(u)的操作<br>(dd)–&gt;删除光标所在的当前行;D–&gt;从光标所在位置开始删除至行尾<br>(：15，100d)–&gt; 删除15至100行 </p><h3 id="复制黏贴"><a href="#复制黏贴" class="headerlink" title="复制黏贴"></a>复制黏贴</h3><p>(yy)复制光标所在的那一行<br>(nyy)n为数字,复制游标所在的向下n行(所在行也算一行)，例如10yy则是复制10行<br>(p)为将已复制的资料在游标下一行贴上，(P)则贴在光标当前行<br>(o)为在当前光标所在的下一行处插入新的一行；(O)为在当前光标所在处的上一行插入新的一行  </p><p>###搜索及替换命令<br>/pattern：从光标开始处向文件尾搜索pattern<br>?pattern：从光标开始处向文件首搜索pattern<br>n：在同一方向重复上一次搜索命令<br>N：在反方向上重复上一次搜索命令<br>：s/p1/p2/g：将当前行中所有p1均用p2替代<br>：n1,n2s/p1/p2/g：将第n1至n2行中所有p1均用p2替代<br>：g/p1/s//p2/g：将文件中所有p1均用p2替换 </p><p>(:set ignorecase) 查找的时候不关心大小写<br>(:set noignorecase) 查找的时候准确匹配大小写</p>]]></content>
      
      <categories>
          
          <category> tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> tools </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vscode插件学习笔记</title>
      <link href="/2018/06/01/vscode/vscode-notepad/"/>
      <url>/2018/06/01/vscode/vscode-notepad/</url>
      <content type="html"><![CDATA[<p>“material-icon-theme.files.associations”: {<br>        “<em>.flow”: “flow”,<br>        “</em>.locations”:”aaaa”<br>    }<br>    ,”search.exclude”: {<br>        “<strong>/node_modules”:true,<br>        “</strong>/bower_components”:true,<br>        “<strong>/target”:true,<br>        “</strong>/logs”:true<br>    },</p><p>“workbench.editor.enablePreview”: false,</p><p>import * as os from ‘os’;<br>if (os.platform() == “win32”) {<br>    this._terminal.sendText(<code>$env:XMAKE_LOGFILE=&quot;${this._logfile}&quot;</code>);<br>} else {<br>    this._terminal.sendText(<code>export XMAKE_LOGFILE=&quot;${this._logfile}&quot;</code>);<br>}</p><p>vscode通过创建OutputChannel来输出自己的日志信息，代码如下：<br>let log = vscode.window.createOutputChannel(“tinyflow/log”);<br>    log.show();<br>    log.appendLine(“hello tiny flow!”);</p><p>let terminal = vscode.window.createTerminal({name: “xmake”});<br>terminal.show(true);<br>terminal.sendText(“xmake”);</p><p>document获取文件的全路径<br>let filename = document.fileName;<br>ocument对应编辑文件的全部内容<br>let inputText = document.getText();    </p><p>vscode.window.showInformationMessage(‘Hello tiny flow!’);</p><p>vscode.commands.executeCommand(cmd:string, …params:object[])</p><p>vscode.window.activeTextEditor.document.uri    </p><p>读取配置也很方便，只要获取xmake相关域配置，进行读取就行了：<br>const config = vscode.workspace.getConfiguration(‘xmake’);<br>config.get(“buildDirectory”);</p><p>“configuration”: {<br>    “type”: “object”,<br>    “title”: “XMake configuration”,<br>    “properties”: {<br>        “xmake.buildDirectory”: {<br>            “type”: “string”,<br>            “default”: “${workspaceRoot}/build”,<br>            “description”: “The Build Output Directory”<br>        }<br>    }<br>}</p><p>search.exclude 用来忽略搜索的文件夹<br>files.exclude 用来忽略工程打开的文件夹</p><p>“search.exclude”: {<br>    “<strong>/node_modules”: true,<br>    “</strong>/bower_components”: true,<br>    “<strong>/target”:true,<br>    “</strong>/.settings”:true,<br>    “<strong>/.classpath”:true,<br>    “</strong>/.project”:true,<br>    “<strong>/.svn”:true<br>},<br>“files.exclude”: {<br>    “</strong>/.git”: true,<br>    “<strong>/.svn”: true,<br>    “</strong>/.hg”: true,<br>    “<strong>/CVS”: true,<br>    “</strong>/.DS_Store”: true,<br>    “<strong>/target”:true,<br>    “</strong>/.settings”:true,<br>    “<strong>/.classpath”:true,<br>    “</strong>/.project”:true<br>}</p>]]></content>
      
      <categories>
          
          <category> vscode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>开源框架</title>
      <link href="/2018/06/01/open-frame/"/>
      <url>/2018/06/01/open-frame/</url>
      <content type="html"><![CDATA[<h2 id="js框架"><a href="#js框架" class="headerlink" title="js框架"></a>js框架</h2><table><thead><tr><th>框架名称</th><th style="text-align:center">介绍</th><th style="text-align:right">备注 </th></tr></thead><tbody><tr><td>prettify.js</td><td style="text-align:center">支持页面语法着亮</td><td style="text-align:right">- </td></tr></tbody></table><h2 id="python框架"><a href="#python框架" class="headerlink" title="python框架"></a>python框架</h2><table><thead><tr><th>框架名称</th><th style="text-align:center">介绍</th><th style="text-align:right">备注 </th></tr></thead><tbody><tr><td>django</td><td style="text-align:center">python的web开发框架</td><td style="text-align:right"><a href="http://www.djangoproject.com/" target="_blank" rel="noopener">官网</a></td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frame </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>开源软件</title>
      <link href="/2018/06/01/open-soft/"/>
      <url>/2018/06/01/open-soft/</url>
      <content type="html"><![CDATA[<h2 id="test"><a href="#test" class="headerlink" title="test"></a>test</h2><table><thead><tr><th>框架名称</th><th style="text-align:center">介绍</th><th style="text-align:right">备注 </th></tr></thead><tbody><tr><td>sts</td><td style="text-align:center">基于 nodejs 的静态服务器</td><td style="text-align:right">“npm install -g sts ; cd webroot-dev ; sts 19091”</td></tr><tr><td>iterm2</td><td style="text-align:center">终端工具　</td><td style="text-align:right">mac下用这个代替系统自带的</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 开源 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soft </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx编译安装</title>
      <link href="/2018/06/01/install/install-nginx/"/>
      <url>/2018/06/01/install/install-nginx/</url>
      <content type="html"><![CDATA[<p>nginx编译安装</p><p>安装nginx之前需要安装相关组件</p><h3 id="openssl安装"><a href="#openssl安装" class="headerlink" title="openssl安装"></a>openssl安装</h3><p>1.官网下载安装包</p><ol start="2"><li>tar zxvf openssl-fips-2.0.10.tar.gz</li><li>cd openssl-fips-2.0.10</li><li>./config </li><li>make &amp;&amp; make install</li></ol><h3 id="pcre安装"><a href="#pcre安装" class="headerlink" title="pcre安装"></a>pcre安装</h3><p>1.官网下载安装包</p><ol start="2"><li>tar zxvf pcre-8.40.tar.gz</li><li>cd pcre-8.40</li><li>./configure </li><li>make &amp;&amp; make install</li></ol><h3 id="zlib安装"><a href="#zlib安装" class="headerlink" title="zlib安装"></a>zlib安装</h3><ol><li>官网下载安装包</li><li>tar zxvf zlib-1.2.11.tar.gz</li><li>cd zlib-1.2.11</li><li>./configure</li><li>make &amp;&amp; make install</li></ol><h3 id="安装openssl"><a href="#安装openssl" class="headerlink" title="安装openssl"></a>安装openssl</h3><p>cd openssl-1.0.2l<br>./config –prefix=/usr/local/openssl<br>make &amp;&amp; make install</p><p>cd nginx-1.10.3/auto/lib/openssl/conf</p><p>CORE_INCS=”$CORE_INCS $OPENSSL/.openssl/include”<br>CORE_DEPS=”$CORE_DEPS $OPENSSL/.openssl/include/openssl/ssl.h”<br>CORE_LIBS=”$CORE_LIBS $OPENSSL/.openssl/lib/libssl.a”<br>CORE_LIBS=”$CORE_LIBS $OPENSSL/.openssl/lib/libcrypto.a”<br>CORE_LIBS=”$CORE_LIBS $NGX_LIBDL”<br>修改成以下代码：</p><p>CORE_INCS=”$CORE_INCS $OPENSSL/include”<br>CORE_DEPS=”$CORE_DEPS $OPENSSL/include/openssl/ssl.h”<br>CORE_LIBS=”$CORE_LIBS $OPENSSL/lib/libssl.a”<br>CORE_LIBS=”$CORE_LIBS $OPENSSL/lib/libcrypto.a”<br>CORE_LIBS=”$CORE_LIBS $NGX_LIBDL”</p><h3 id="最后安装nignx"><a href="#最后安装nignx" class="headerlink" title="最后安装nignx"></a>最后安装nignx</h3><ol><li>官网下载安装包</li><li>tar zxvf nginx-1.10.3.tar.gz</li><li>cd nginx-1.10.3</li><li>./configure  –with-http_stub_status_module –with-http_ssl_module –with-ssl=/usr/local/openssl</li><li>make &amp;&amp; make install</li></ol><h3 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h3><p>配置请求从nginx转发到tomcat<br>vi nginx.conf<br>在server {节点里面增加配置:<br>location  /应用名/ {<br>       proxy_set_header Host $host;<br>       proxy_pass http://对应ip:对应端口/应用名/;<br>}</p><p>重启nginx,让配置生效</p><p>nginx实现tcp反向代理</p><p>下载tcp模块源码<br>git clone <a href="https://github.com/yaoweibin/nginx_tcp_proxy_module.git" target="_blank" rel="noopener">https://github.com/yaoweibin/nginx_tcp_proxy_module.git</a></p><p>给nginx源码打patch<br>cd nginx-1.10.3<br>patch -p1 &lt; ../nginx_tcp_proxy_module/tcp.patch</p><p>./configure  –add-module=../nginx_tcp_proxy_module –prefix=/usr/local/nginx –with-openssl=/usr/local/openssl<br>make &amp;&amp; sudo make install</p><ol start="4"><li>root用户/root/.bash_profile文件中增加<br>export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH<br>再执行命令source /root/.bash_profile</li></ol><p>5.cd /usr/local/nginx<br>增加配置vi conf/nginx.conf</p><p>tcp{<br>     upstream cluster {<br>             server xx.xx.x1:5222;<br>     }<br>     server{<br>             listen 5000;<br>             proxy_pass cluster;<br>     }<br>}<br>tcp 和 http是平级的</p><p>客户端直接访问nginx服务器的ip:5222</p><p>nginx -s reload  ：修改配置后重新加载生效<br>nginx 启动<br>nginx -s stop 关闭</p><p>stream {<br>  upstream backend {<br>    hash $remote_addr consistent;<br>    server 10.25.0.141:5222 weight=5;<br>    server 10.25.0.141:5222      max_fails=3 fail_timeout=30s;<br>    server unix:/tmp/backend3;<br>  }<br>  server {<br>    listen 8111;<br>    proxy_connect_timeout 1s;<br>    proxy_timeout 3s;<br>    proxy_pass backend;<br>  }<br>  server {<br>    listen [::1]:8111;<br>    proxy_pass unix:/tmp/stream.socket;<br>  }<br>}</p><p>stream{<br>    upstream backend{<br>        hash $remote_addr consistent;<br>        server 10.25.0.141:5222 max_fails=3 fail_timeout=10s;<br>    }<br>    server{<br>        listen 8112;<br>        proxy_connect_timeout 20s;<br>        proxy_timeout 5m;<br>        proxy_pass backend;<br>    }<br>}</p>]]></content>
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cpp-string</title>
      <link href="/2018/06/01/script/cpp-string/"/>
      <url>/2018/06/01/script/cpp-string/</url>
      <content type="html"><![CDATA[<p>c++语言字符串操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; split(<span class="keyword">const</span> <span class="built_in">string</span>&amp; src, <span class="keyword">const</span> <span class="built_in">string</span> sp) ;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">(<span class="string">"Hello,World"</span>)</span></span>;</span><br><span class="line"><span class="comment">//1.获取字符串的第一个字母</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"1.获取字符串的第一个字母:"</span> + str.substr(<span class="number">0</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//2.获取字符串的第二和第三个字母</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2.获取字符串的第二和第三个字母:"</span> + str.substr(<span class="number">1</span>, <span class="number">2</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//3.获取字符串的最后一个字母</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"3.获取字符串的最后一个字母:"</span> + str.substr(str.length() - <span class="number">1</span>, <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//4.字符串开头字母判断</span></span><br><span class="line"><span class="keyword">if</span> (str.find(<span class="string">"Hello"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"4.字符串开头字母比较:以Hello开头"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5.字符串结尾字母判断</span></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">w</span><span class="params">(<span class="string">"World"</span>)</span></span>;</span><br><span class="line"><span class="keyword">if</span> (str.rfind(w) == str.length() - w.length()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"5.字符串结尾字母比较:以World结尾"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//6.获取字符串长度</span></span><br><span class="line"><span class="built_in">stringstream</span> ss;</span><br><span class="line">ss &lt;&lt; str.length();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"6.获取字符串长度:"</span> + ss.str() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//7.大小写转换</span></span><br><span class="line">transform(str.begin(), str.end(), str.begin(), ::<span class="built_in">toupper</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"7.大小写转换:"</span> + str;</span><br><span class="line">transform(str.begin(), str.end(), str.begin(), ::<span class="built_in">tolower</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">","</span> + str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//8.字符串转int,int转字符串</span></span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="function"><span class="built_in">stringstream</span> <span class="title">ss2</span><span class="params">(<span class="string">"100"</span>)</span></span>;</span><br><span class="line">ss2 &gt;&gt; num;</span><br><span class="line"><span class="built_in">stringstream</span> ss3;</span><br><span class="line">ss3 &lt;&lt; num;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"8.字符串转int,int转字符串:"</span> + ss3.str() + <span class="string">","</span> + ss3.str() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//9.分割字符串</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strs = ::split(str,<span class="built_in">string</span>(<span class="string">","</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"9.分割字符串:["</span> + strs[<span class="number">0</span>] +<span class="string">","</span>+strs[<span class="number">1</span>]&lt;&lt;<span class="string">"]"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//10.判断字符串是否包含</span></span><br><span class="line">str=<span class="string">"Hello,World"</span>;</span><br><span class="line"><span class="keyword">if</span> (str.find(<span class="string">"o,W"</span>)!=<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"10.分割字符串:包含o,W"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; split(<span class="keyword">const</span> <span class="built_in">string</span>&amp; src, <span class="built_in">string</span> sp) &#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; strs;</span><br><span class="line"><span class="keyword">int</span> sp_len = sp.size();</span><br><span class="line"><span class="keyword">int</span> position = <span class="number">0</span>, index = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">-1</span> != (index = src.find(sp, position))) &#123;</span><br><span class="line">strs.push_back(src.substr(position, index - position));</span><br><span class="line">position = index + sp_len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> lastStr = src.substr(position);</span><br><span class="line"><span class="keyword">if</span> (!lastStr.empty())</span><br><span class="line">strs.push_back(lastStr);</span><br><span class="line"><span class="keyword">return</span> strs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> cpp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> string </tag>
            
            <tag> cpp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>php-string</title>
      <link href="/2018/06/01/script/php-string/"/>
      <url>/2018/06/01/script/php-string/</url>
      <content type="html"><![CDATA[<p>php语言字符串操作</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">$_str=<span class="string">"Hello,World"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.获取字符串的第一个字母</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"1.获取字符串的第一个字母:"</span>.substr($_str,<span class="number">0</span>,<span class="number">1</span>).<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取字符串的第二和第三个字母</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"2.获取字符串的第二和第三个字母:"</span>.substr($_str,<span class="number">1</span>,<span class="number">2</span>).<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取字符串的最后一个字母</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"3.获取字符串的最后一个字母:"</span>.substr($_str,strlen($_str)<span class="number">-1</span>,<span class="number">1</span>).<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.字符串开头字母判断</span></span><br><span class="line"><span class="keyword">if</span>(strrpos($_str,<span class="string">"Hello"</span>)!==<span class="keyword">false</span> &amp;&amp; strrpos($_str,<span class="string">"Hello"</span>)==<span class="number">0</span>)&#123;  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"4.字符串开头字母比较:以Hello开头&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.字符串结尾字母判断</span></span><br><span class="line"><span class="keyword">if</span>(strrpos($_str,<span class="string">"World"</span>)!==<span class="keyword">false</span> &amp;&amp; strrpos($_str,<span class="string">"World"</span>)== strlen($_str)<span class="number">-5</span>)&#123;  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"5.字符串结尾字母比较:以World结尾&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6.获取字符串长度</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"6.获取字符串长度:"</span>.strlen($_str).<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//7.大小写转换</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"7.大小写转换:"</span>.strtoupper($_str).<span class="string">","</span>.strtolower($_str).<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//8.字符串转int,int转字符串</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"8.字符串转int,int转字符串:"</span>.intval(<span class="string">"100"</span>).<span class="string">","</span>.((string)<span class="number">100</span>).<span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//9.分割字符串</span></span><br><span class="line">$a = explode(<span class="string">','</span>,$_str);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"9.分割字符串:["</span>.$_str.<span class="string">"---&gt;"</span>.$a[<span class="number">0</span>].<span class="string">"]&lt;br/&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//10.判断字符串是否包含</span></span><br><span class="line"><span class="keyword">if</span>(strrpos($_str,<span class="string">"o,W"</span>)!==<span class="keyword">false</span> &amp;&amp; strrpos($_str,<span class="string">"o,W"</span>)&gt;=<span class="number">0</span>)&#123;  </span><br><span class="line"><span class="keyword">echo</span> <span class="string">"10.分割字符串:包含o,W&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 程序语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>看过的书</title>
      <link href="/2018/06/01/read-book/"/>
      <url>/2018/06/01/read-book/</url>
      <content type="html"><![CDATA[<h3 id="大话设计模式"><a href="#大话设计模式" class="headerlink" title="大话设计模式"></a>大话设计模式</h3><p>非常不错，我的设计模式就是靠这本书入的门,讲的非常浅显易懂.<br>值得购买，和多看几遍;</p><h3 id="web安全"><a href="#web安全" class="headerlink" title="web安全"></a>web安全</h3><p>我的安全知识入门;</p><h3 id="java夜未眠"><a href="#java夜未眠" class="headerlink" title="java夜未眠"></a>java夜未眠</h3><p>可以扩展些知识，读起来也很轻松;</p><h3 id="think-in-java"><a href="#think-in-java" class="headerlink" title="think in java"></a>think in java</h3><p>看过好几遍，不建议入门看这本，当初刚学ｊａｖａ，看这本书，还是很受打击的．<br>后面每次翻这本书，总有新的收获；</p><h3 id="c程序设计语言（第2版）"><a href="#c程序设计语言（第2版）" class="headerlink" title="c程序设计语言（第2版）"></a>c程序设计语言（第2版）</h3><p>相见恨晚，早期学c就能看这本书该有多好，<br>很多疑问都可以在该书找到解答。</p>]]></content>
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> book </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>curl使用</title>
      <link href="/2018/06/01/linux/linux-curl/"/>
      <url>/2018/06/01/linux/linux-curl/</url>
      <content type="html"><![CDATA[<h3 id="请求头信息"><a href="#请求头信息" class="headerlink" title="请求头信息"></a>请求头信息</h3><p>curl URL -H ‘Content-Type:application/json’</p><h3 id="携带请求参数"><a href="#携带请求参数" class="headerlink" title="携带请求参数"></a>携带请求参数</h3><p>curl URL -d “pa1=1&amp;pa2=2”</p><h3 id="urlencode"><a href="#urlencode" class="headerlink" title="urlencode"></a>urlencode</h3><p>curl URL –data-urlencode “pa1=这个&amp;pa2=哈哈”</p><p>###　返回http头信息<br>curl -i URL  </p><h3 id="访问https网站"><a href="#访问https网站" class="headerlink" title="访问https网站"></a>访问https网站</h3><p>curl  –insecure URL </p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> curl </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux-find</title>
      <link href="/2018/06/01/linux/linux-find/"/>
      <url>/2018/06/01/linux/linux-find/</url>
      <content type="html"><![CDATA[<p>linux命令–find</p><h3 id="列出目录下所有的文件"><a href="#列出目录下所有的文件" class="headerlink" title="列出目录下所有的文件"></a>列出目录下所有的文件</h3><p>find dir </p><p>-path 以整体的路径进行匹配  -name则以文件名进行匹配<br>-iname 忽略大小写<br>! -name  反义</p><h3 id="当前目录下查找更改时间在5日以内的文件，可以用："><a href="#当前目录下查找更改时间在5日以内的文件，可以用：" class="headerlink" title="当前目录下查找更改时间在5日以内的文件，可以用："></a>当前目录下查找更改时间在5日以内的文件，可以用：</h3><p>find . -mtime -5 -print  +5则是5日以前</p><h3 id="或者5分钟内"><a href="#或者5分钟内" class="headerlink" title="或者5分钟内"></a>或者5分钟内</h3><p>find . -mmin -5 -print   +5则是超过5分钟</p><h3 id="时间戳概念-newer"><a href="#时间戳概念-newer" class="headerlink" title="时间戳概念 -newer"></a>时间戳概念 -newer</h3><p>find . -type f -newer file.txt -print<br>比file.txt这个参考文件更新的所有文件。</p><h3 id="当前目录下查找所有的目录，可以用："><a href="#当前目录下查找所有的目录，可以用：" class="headerlink" title="当前目录下查找所有的目录，可以用："></a>当前目录下查找所有的目录，可以用：</h3><p>find . -type d -print </p><h3 id="为了在当前目录下查找除目录以外的所有类型的文件，可以用："><a href="#为了在当前目录下查找除目录以外的所有类型的文件，可以用：" class="headerlink" title="为了在当前目录下查找除目录以外的所有类型的文件，可以用："></a>为了在当前目录下查找除目录以外的所有类型的文件，可以用：</h3><p>find . ! -type d -print </p><h3 id="当前目录下查找所有的符号链接文件，可以用："><a href="#当前目录下查找所有的符号链接文件，可以用：" class="headerlink" title="当前目录下查找所有的符号链接文件，可以用："></a>当前目录下查找所有的符号链接文件，可以用：</h3><p>find . -type l -print </p><h3 id="想要在当前目录及子目录中查找文件名以一个大写字母开头的文件"><a href="#想要在当前目录及子目录中查找文件名以一个大写字母开头的文件" class="headerlink" title="想要在当前目录及子目录中查找文件名以一个大写字母开头的文件"></a>想要在当前目录及子目录中查找文件名以一个大写字母开头的文件</h3><p>find . -name “[A-Z]*” -print   </p><h3 id="执行命令exec"><a href="#执行命令exec" class="headerlink" title="执行命令exec"></a>执行命令exec</h3><p>计算当前目录下各文件的大小<br>find . -type f -exec du -h {} \;</p><h3 id="查询大于100M的文件"><a href="#查询大于100M的文件" class="headerlink" title="查询大于100M的文件"></a>查询大于100M的文件</h3><p>find . -size +100M  </p><h3 id="查找文件内容"><a href="#查找文件内容" class="headerlink" title="查找文件内容"></a>查找文件内容</h3><p>find . -type f -name “*.java” |xargs -n 10 grep ‘new RpcResult(new RuntimeException’ -l</p><p>find . -type f -name “*.ts” |xargs -n 10 grep ‘registerDocumentLinkProvider’ -l</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> find </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux-tar</title>
      <link href="/2018/06/01/linux/linux-tar/"/>
      <url>/2018/06/01/linux/linux-tar/</url>
      <content type="html"><![CDATA[<p>linux 解压</p><h3 id="tar"><a href="#tar" class="headerlink" title=".tar"></a>.tar</h3><p>解包： tar xvf FileName.tar<br>打包：tar cvf FileName.tar DirName</p><h3 id="gz"><a href="#gz" class="headerlink" title=".gz"></a>.gz</h3><p>解压1：gunzip FileName.gz<br>解压2：gzip -d FileName.gz<br>压缩：gzip FileName<br>.tar.gz 和 .tgz<br>解压：tar zxvf FileName.tar.gz<br>压缩：tar zcvf FileName.tar.gz DirName</p><h3 id="bz2"><a href="#bz2" class="headerlink" title=".bz2"></a>.bz2</h3><p>解压1：bzip2 -d FileName.bz2<br>解压2：bunzip2 FileName.bz2<br>压缩： bzip2 -z FileName<br>.tar.bz2<br>解压：tar jxvf FileName.tar.bz2<br>压缩：tar jcvf FileName.tar.bz2 DirName</p><h3 id="bz"><a href="#bz" class="headerlink" title=".bz"></a>.bz</h3><p>解压1：bzip2 -d FileName.bz<br>解压2：bunzip2 FileName.bz<br>压缩：未知<br>.tar.bz<br>解压：tar jxvf FileName.tar.bz<br>压缩：未知</p><h3 id="Z"><a href="#Z" class="headerlink" title=".Z"></a>.Z</h3><p>解压：uncompress FileName.Z<br>压缩：compress FileName<br>.tar.Z<br>解压：tar Zxvf FileName.tar.Z<br>压缩：tar Zcvf FileName.tar.Z DirName</p><h3 id="zip"><a href="#zip" class="headerlink" title=".zip"></a>.zip</h3><p>解压：unzip FileName.zip</p><h2 id="压缩：zip-r-FileName-zip-DirName"><a href="#压缩：zip-r-FileName-zip-DirName" class="headerlink" title="压缩：zip -r FileName.zip DirName"></a>压缩：zip -r FileName.zip DirName</h2><p>.rar<br>解压：rar a FileName.rar</p><h2 id="压缩：rar-e-FileName-rar"><a href="#压缩：rar-e-FileName-rar" class="headerlink" title="压缩：rar e FileName.rar"></a>压缩：rar e FileName.rar</h2><p>.7z<br>解压: 7z x FileName.7z</p><h2 id="压缩："><a href="#压缩：" class="headerlink" title="压缩："></a>压缩：</h2><h3 id="打包和切割"><a href="#打包和切割" class="headerlink" title="打包和切割"></a>打包和切割</h3><p>要将目录logs打包压缩并分割成多个1M的文件，可以用下面的命令：<br>tar cjf - logs/ |split -b 1m - logs.tar.bz2.<br>完成后会产生下列文件：<br>logs.tar.bz2.aa, logs.tar.bz2.ab, logs.tar.bz2.ac<br>要解压的时候只要执行下面的命令就可以了：<br>cat logs.tar.bz2.a* | tar jxv</p><h3 id="加密和解压"><a href="#加密和解压" class="headerlink" title="加密和解压"></a>加密和解压</h3><p>zip -e yu.zip yu/<br>接着提示输入2次密码</p><p>unzip yu.zip<br>接着会提示输入密码</p><h3 id="排除目录"><a href="#排除目录" class="headerlink" title="排除目录"></a>排除目录</h3><p>tar cfz hosteguide.com.tar.gz –exclude=/var/www/hosteguide.com/files/dontneed /var/www/hosteguide.com </p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> tar </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mac下常用命令</title>
      <link href="/2018/06/01/linux/mac-commands/"/>
      <url>/2018/06/01/linux/mac-commands/</url>
      <content type="html"><![CDATA[<h3 id="打开当前目录"><a href="#打开当前目录" class="headerlink" title="打开当前目录"></a>打开当前目录</h3><p>open . </p><h3 id="iterm屏幕切分"><a href="#iterm屏幕切分" class="headerlink" title="iterm屏幕切分"></a>iterm屏幕切分</h3><p>cmd + d  水平分屏幕<br>cmd + shift + d 垂直分屏幕</p><h3 id="pbcopy-和-pbpaste"><a href="#pbcopy-和-pbpaste" class="headerlink" title="pbcopy 和 pbpaste"></a>pbcopy 和 pbpaste</h3><p>ls ~|pbcopy<br>pbcopy &lt; blogpost.txt<br>pbpaste &gt;&gt; tasklist.txt</p><h3 id="mdfind"><a href="#mdfind" class="headerlink" title="mdfind"></a>mdfind</h3><p>-onlyin选项可以约束搜索范围为一个目录：<br>mdfind -onlyin ~/Documents essay</p><h3 id="screencapture命令可以截图"><a href="#screencapture命令可以截图" class="headerlink" title="screencapture命令可以截图"></a>screencapture命令可以截图</h3><p>抓取包含鼠标光标的全屏幕，并以image.png插入到新邮件的附件中：<br>screencapture -C -M image.png<br>用鼠标选择抓取窗口（及阴影）并复制到剪贴板：<br>screencapture -c -W<br>延时10秒后抓屏，并在Preview中打开之：<br>全选复制放进笔记<br>screencapture -T 10 -P image.png<br>用鼠标截取一个矩形区域，抓取后存为pdf文件：<br>全选复制放进笔记<br>screencapture -s -t pdf image.pd</p><h3 id="launchctl"><a href="#launchctl" class="headerlink" title="launchctl"></a>launchctl</h3><p>launchctl管理OS X的启动脚本，控制启动计算机时需要开启的服务。也可以设置定时执行特定任务的脚本，就像Linux cron一样。</p><p>例如，开机时自动启动Apache服务器：<br>sudo launchctl load -w /System/Library/LaunchDaemons/org.apache.httpd.plist<br>运行launchctl list显示当前的启动脚本。sudo launchctl unload [path/to/script]停止正在运行的启动脚本，再加上-w选项即可去除开机启动。用这个方法可以一次去除Adobe或Microsoft Office所附带的所有“自动更新”后台程序。</p><p>Launchd脚本存储在以下位置：<br>~/Library/LaunchAgents<br>/Library/LaunchAgents<br>/Library/LaunchDaemons<br>/System/Library/LaunchAgents<br>/System/Library/LaunchDaemons</p><h3 id="say"><a href="#say" class="headerlink" title="say"></a>say</h3><p>say是一个文本转语音（TTS）的有趣的工具，引擎和OS X使用的一样也是VoiceOver。如果不加其他选项，则会简单的语音朗读你给定的字符串：</p><p>$ say “Never trust a computer you can’t lift.”<br>用-f选项朗读特定文本文件，-o选项将朗读结果存为音频文件而不是播放：</p><p>全选复制放进笔记$ say -f mynovel.txt -o myaudiobook.aiff<br>say命令可以用于在脚本中播放警告或提示。例如你可以设置Automator或Hazel脚本处理文件，并在任务完成时用say命令语音提示。</p><h3 id="刷新签名"><a href="#刷新签名" class="headerlink" title="刷新签名"></a>刷新签名</h3><p>xattr -rc .<br>sudo codesign -fs - /Applications/Utilities/Boot\ Camp\ Assistant.app<br>检查下签名是否完整好用，如果正确，没任何输出；<br>codesign –verify ~/Desktop/TestWidget.app </p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>技术问题汇总</title>
      <link href="/2018/06/01/think/think-problems/"/>
      <url>/2018/06/01/think/think-problems/</url>
      <content type="html"><![CDATA[<h3 id="管理平台状态显示中文数字或者英文，没有对应转换为中文。"><a href="#管理平台状态显示中文数字或者英文，没有对应转换为中文。" class="headerlink" title="管理平台状态显示中文数字或者英文，没有对应转换为中文。"></a>管理平台状态显示中文数字或者英文，没有对应转换为中文。</h3><p>问题分析：数据库字段对应的是char类型，会有空格，导致，无法匹配转换</p><h3 id="部署在一台服务器没问题，部署到新的服务器有问题"><a href="#部署在一台服务器没问题，部署到新的服务器有问题" class="headerlink" title="部署在一台服务器没问题，部署到新的服务器有问题"></a>部署在一台服务器没问题，部署到新的服务器有问题</h3><p>问题分析：确认jdk版本和服务器版本， 有可能是jar包或者编译代码的jdk版本太高导致</p><h3 id="代码调试的时候-突然跳过好几行-或者觉的不该在对应X行就跳出来的情况"><a href="#代码调试的时候-突然跳过好几行-或者觉的不该在对应X行就跳出来的情况" class="headerlink" title="代码调试的时候,突然跳过好几行,或者觉的不该在对应X行就跳出来的情况:"></a>代码调试的时候,突然跳过好几行,或者觉的不该在对应X行就跳出来的情况:</h3><p>问题分析：很有可能是代码编译出问题,运行的代码和源码不一致.</p><h3 id="执行sql，一直在执行中"><a href="#执行sql，一直在执行中" class="headerlink" title="执行sql，一直在执行中"></a>执行sql，一直在执行中</h3><p>问题分析：很可能是别的程序执行相关sql未提交导致</p><h3 id="打印出来的2个字符串一致，但判断相等却是不等？"><a href="#打印出来的2个字符串一致，但判断相等却是不等？" class="headerlink" title="打印出来的2个字符串一致，但判断相等却是不等？"></a>打印出来的2个字符串一致，但判断相等却是不等？</h3><p>问题分析:很可能是有字符串包含空格</p>]]></content>
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
